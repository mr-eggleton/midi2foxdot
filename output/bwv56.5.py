Scale.default = list(range(12))
def structure(f):
    f()
    return f
@structure
def a0():
	d0 >> pluck([-60, 12, 7, 12, 12, 10, 10, 9, 9, 7, -60, 3, 7],dur=[rest(1.0) ,2.0 ,1.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,2.0 ,2.0 ,rest(1.0) ,2.0 ,1.0])
	d1 >> pluck([-60, 3, 2, 6, 7, 9, 9, 7, 7, 7, 6, 2, -60, 0, 0],dur=[rest(1.0) ,2.0 ,1.0 ,0.5 ,0.5 ,1.0 ,0.5 ,0.5 ,1.0 ,1.0 ,1.0 ,2.0 ,rest(1.0) ,2.0 ,1.0])
	d2 >> pluck([-60, -5, -2, 0, 3, 2, 2, 3, 2, 0, -1, -60, 0, -5],dur=[rest(1.0) ,2.0 ,1.0 ,1.0 ,0.5 ,0.5 ,1.0 ,1.0 ,1.5 ,0.5 ,2.0 ,rest(1.0) ,2.0 ,1.0])
	d3 >> pluck([-60, -12, -14, -15, -6, -5, -12, -10, -17, -60, -16, -9],dur=[rest(1.0) ,2.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,2.0 ,2.0 ,rest(1.0) ,2.0 ,1.0])
@structure
def a1():
	d0 >> pluck([5, 3, 2, 3, 2, 0, 3, 5, 7, 8, 8, 7, 7],dur=[1.0 ,0.5 ,0.5 ,1.0 ,1.0 ,4.0 ,2.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0])
	d1 >> pluck([2, -1, 0, 0, -1, -5, 0, 2, 3, 5, 5, 5, 2, 3],dur=[0.5 ,0.5 ,1.0 ,1.0 ,1.0 ,4.0 ,2.0 ,1.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,1.0])
	d2 >> pluck([-4, -3, -5, -5, -7, -9, -5, -2, 0, -2, -2, 0],dur=[1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,4.0 ,2.0 ,2.0 ,1.0 ,1.0 ,1.0 ,1.0])
	d3 >> pluck([-7, -6, -17, -60, -12, -12, -14, -16, -17, -19, -10, -9, -12],dur=[1.0 ,1.0 ,1.0 ,rest(1.0) ,4.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0])
@structure
def a2():
	d0 >> pluck([5, 3, 7, 9, 10, 7, 12, 12, 11, 12, 15, 14, 12],dur=[2.0 ,2.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,2.0 ,1.0 ,1.0 ,1.0 ,1.0])
	d1 >> pluck([3, 2, -2, 3, 3, 5, 3, 3, 3, 2, 2, 7, 7, 8, 7, 5],dur=[1.0 ,1.0 ,2.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,2.0 ,1.0 ,1.0 ,0.5 ,1.0 ,0.5])
	d2 >> pluck([0, -2, -4, -5, -2, 0, -2, -2, 0, -2, -3, -5, -5, 0, 0, -1, 0, 2],dur=[1.0 ,0.5 ,0.5 ,2.0 ,1.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,1.0 ,2.0 ,1.0 ,1.0 ,0.5 ,0.5 ,0.5 ,0.5])
	d3 >> pluck([-16, -14, -21, -9, -12, -10, -9, -16, -17, -18, -17, -9, -10, -12, -7, -5, -4],dur=[1.0 ,1.0 ,2.0 ,1.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,1.0 ,2.0 ,0.5 ,0.5 ,1.0 ,0.5 ,0.5 ,1.0])
Clock.clear()

start = Clock.mod(16) - 0.1
Clock.schedule(a0, start + 0)
Clock.schedule(a1, start + 16)
Clock.schedule(a2, start + 32)
Clock.schedule(lambda : Clock.clear(), start + 48)
