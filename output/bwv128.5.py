Scale.default = list(range(12))
def structure(f):
    f()
    return f
@structure
def a0():
	d0 >> pluck([14, 14, 19, 18, 19, 14, 12, 14, 11, 12, 16, 14, 14, 14, 12, 11, 9, 7, 9, 11, 12, 11],dur=[1.0 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,3.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,0.25 ,0.25 ,1.0 ,1.0])
	d1 >> pluck([9, 11, 9, 7, 7, 7, 12, 11, 9, 7, 9, 7, 2, 2, -1, -5, 2, 2],dur=[1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,3.0 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,1.0 ,1.0 ,0.5 ,0.25 ,0.25 ,1.0 ,1.0])
	d2 >> pluck([14, 11, 9, 7, 14, 14, 16, 17, 16, 16, 9, 9, 14, 12, 11, 9, 7],dur=[1.0 ,1.0 ,0.5 ,0.5 ,1.0 ,0.5 ,0.25 ,0.25 ,3.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0])
	d3 >> pluck([9, 7, 12, 11, 11, 7, 4, 6, 6, 7, 2, 7, 6, 2],dur=[1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,3.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0])
	d4 >> pluck([2, 2, 6, 7, 7, 2, 0, -5, 2, 2, 2, 2, 2, 2, -3, -1],dur=[1.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,3.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,1.0])
	d5 >> pluck([-6, -5, -3, -1, -5, 0, -12, -10, 2, 0, -1, -3, -5, -6, -5, -10, -17],dur=[1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,3.0 ,1.0 ,1.0 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,1.0 ,1.0])
@structure
def a1():
	d0 >> pluck([11, 12, 14, 12, 11, 9, 7, 9, 7, 14, 14, 16, 9, 11, 13, 14, 13, 14],dur=[1.0 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,3.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,0.5 ,1.0 ,0.5 ,1.0])
	d1 >> pluck([7, 7, 11, 9, 7, 2, -1, 2, 2, 9, 7, 7, 2, 2, 9, 9],dur=[1.0 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,3.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,2.0 ,1.0])
	d2 >> pluck([14, 16, 16, 14, 12, 11, 12, 11, 9, 11, 13, 14, 16, 18, 19, 18, 16, 14, 14],dur=[1.0 ,1.0 ,1.0 ,1.0 ,0.25 ,0.25 ,0.5 ,3.0 ,1.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.25 ,0.25 ,1.0 ,0.5 ,0.5 ,1.0])
	d3 >> pluck([11, 7, 9, 9, 11, 9, 2, 2, 2, 7, 7, 6, 11, 9, 9],dur=[1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,0.5 ,0.5 ,3.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,2.0 ,1.0])
	d4 >> pluck([7, 4, 4, 6, 6, 7, 2, 2, -5, -3, 4, 4, 2, 7, 6, 6],dur=[1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,3.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0])
	d5 >> pluck([-5, 0, -3, 2, -10, -5, -6, -5, -8, -6, -5, -3, -15, -10],dur=[1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,3.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0])
@structure
def a2():
	d0 >> pluck([9, 11, 12, 11, 9, 11, 12, 14, 11, 12, 11, 13, 14, 13, 11, 13, 14, 16, 13, 14],dur=[0.5 ,0.25 ,0.25 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,1.0 ,3.0 ,0.5 ,0.25 ,0.25 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,1.0 ,3.0])
	d1 >> pluck([2, -5, 2, -1, 2, 7, 7, 11, 9, 9, 9, 9, 9],dur=[1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,1.0 ,3.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,3.0])
	d2 >> pluck([14, 14, 14, 19, 17, 16, 16, 16, 16, 16, 18, 19, 21, 19, 18, 18],dur=[1.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,3.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.25 ,0.25 ,0.5 ,0.5 ,3.0])
	d3 >> pluck([9, 7, 7, 7, 9, 11, 7, 4, 9, 9, 9, 11, 13, 9],dur=[1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,1.0 ,3.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,1.0 ,3.0])
	d4 >> pluck([2, -3, -1, 0, 2, 2, 2, 0, 4, -1, 1, 2, 4, 4, 4, 2],dur=[0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,1.0 ,1.0 ,3.0 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,1.0 ,1.0 ,3.0])
	d5 >> pluck([-6, -5, -17, -15, -13, -17, -12, -4, -3, -15, -13, -11, -15, -10],dur=[1.0 ,1.0 ,0.5 ,0.5 ,1.0 ,1.0 ,3.0 ,1.0 ,1.0 ,0.5 ,0.5 ,1.0 ,1.0 ,3.0])
@structure
def a3():
	d0 >> pluck([11, 12, 7, 12, 11, 11, 14, 12, 11, 12, 14, 16, 18, 19, 18, 19],dur=[1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,3.0 ,0.5 ,0.5 ,1.0 ,0.5 ,0.5 ,0.5 ,0.25 ,0.25 ,1.0 ,3.0])
	d1 >> pluck([7, 7, 2, 9, 9, 7, 9, 7, 7, 7, 2, -1, 2, 2, 2, -1],dur=[1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,3.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.25 ,0.25 ,0.5 ,0.25 ,0.25 ,3.0])
	d2 >> pluck([14, 16, 14, 16, 18, 19, 14, 14, 12, 11, 9, 7, 7],dur=[1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,3.0 ,1.0 ,1.0 ,0.5 ,0.5 ,1.5 ,0.5 ,3.0])
	d3 >> pluck([11, 7, 11, 4, 11, 11, 9, 11, 9, 7, 7, 6, 4, 6, 2],dur=[1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,3.0 ,1.0 ,0.5 ,0.5 ,1.0 ,0.5 ,0.25 ,0.25 ,1.0 ,3.0])
	d4 >> pluck([2, 0, 7, 0, 9, 6, 4, -3, 2, 4, 4, 2, -3, -1],dur=[1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,1.0 ,3.0 ,1.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,3.0])
	d5 >> pluck([-5, 0, -1, -3, -9, -8, -6, -5, -6, -8, -10, -12, -10, -17],dur=[1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,3.0 ,1.0 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,1.0 ,3.0])
Clock.clear()

start = Clock.mod(16) - 0.1
Clock.schedule(a0, start + 0)
Clock.schedule(a1, start + 16)
Clock.schedule(a2, start + 32)
Clock.schedule(a3, start + 48)
Clock.schedule(lambda : Clock.clear(), start + 64)
