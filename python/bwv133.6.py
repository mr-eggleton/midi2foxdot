Scale.default = list(range(12))
def structure(f):
    f()
    return f
@structure
def a0():
	d0 >> pluck([6, 7, 9, 11, 9, 7, 6, 6, -60, 9, 11, 13, 14, 14, 13, 13, 11],dur=[0.5 ,0.5 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,2.0 ,rest(1.0) ,1.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,2.0 ,1.0])
	d1 >> pluck([2, 1, 2, 2, 2, 1, -1, 1, 2, -60, 6, 8, 10, 11, 6, 6, 4, 2],dur=[0.5 ,0.5 ,1.0 ,1.0 ,0.5 ,0.25 ,0.25 ,1.0 ,2.0 ,rest(1.0) ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.5 ,0.5 ,1.0])
	d2 >> pluck([-3, -3, -5, -6, -8, -3, -3, -60, -3, 4, 4, 6, -1, -1, -2, -1],dur=[1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,1.0 ,2.0 ,rest(1.0) ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0])
	d3 >> pluck([-10, -8, -6, -5, -3, -15, -10, -60, -10, -10, -11, -13, -11, -10, -8, -6, -13],dur=[0.5 ,0.5 ,1.0 ,1.0 ,1.0 ,1.0 ,2.0 ,rest(1.0) ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,0.5 ,0.5 ,2.0 ,1.0])
@structure
def a1():
	d0 >> pluck([16, 14, 13, 14, 13, 11, 9, 9, 9, 11, 13, 14, 14, 13],dur=[0.5 ,0.5 ,1.0 ,0.5 ,0.5 ,1.5 ,0.5 ,3.0 ,1.0 ,1.0 ,1.0 ,1.5 ,0.5 ,3.0])
	d1 >> pluck([4, 4, 6, 6, 2, 4, 4, 4, 4, 6, 8, 9, 4, 4],dur=[1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,1.0 ,3.0 ,1.0 ,0.5 ,0.5 ,1.0 ,1.0 ,1.0 ,3.0])
	d2 >> pluck([-1, -3, -3, -3, -4, 1, 1, -1, 4, 2, 1, -1, -3],dur=[1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,3.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,1.0 ,3.0])
	d3 >> pluck([-4, -3, -4, -6, -8, -10, -13, -8, -15, -3, -4, -8, -6, -5, -3],dur=[1.0 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,3.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,3.0])
@structure
def a2():
	d0 >> pluck([9, 9, 11, 9, 7, 6, 6, -60, 9, 11, 13, 14, 14, 13, 14],dur=[1.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,2.0 ,rest(1.0) ,1.0 ,0.5 ,0.5 ,1.0 ,1.0 ,1.0 ,3.0])
	d1 >> pluck([4, 6, 7, 6, 4, 4, 2, -60, 2, 2, 4, 4, 6, 7, 6],dur=[1.0 ,1.0 ,0.5 ,0.5 ,1.0 ,1.0 ,2.0 ,rest(1.0) ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,1.0 ,3.0])
	d2 >> pluck([1, 2, -5, -3, -1, 1, -1, -60, -3, -5, -3, -1, -3, -3, -3],dur=[1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,1.0 ,2.0 ,rest(1.0) ,1.0 ,0.5 ,0.5 ,1.0 ,1.0 ,1.0 ,3.0])
	d3 >> pluck([-5, -6, -8, -10, -11, -15, -13, -60, -6, -5, -4, -3, -15, -10],dur=[1.0 ,1.0 ,0.5 ,0.5 ,1.0 ,1.0 ,2.0 ,rest(1.0) ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,3.0])
Clock.clear()

start = Clock.mod(16) - 0.1
Clock.schedule(a0, start + 0)
Clock.schedule(a1, start + 16)
Clock.schedule(a2, start + 32)
Clock.schedule(lambda : Clock.clear(), start + 48)
