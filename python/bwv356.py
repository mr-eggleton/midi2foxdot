Scale.default = list(range(12))
def structure(f):
    f()
    return f
@structure
def a0():
	d0 >> pluck([7, 9, 10, 12, 14, 12, 10, 9, 7, 14, 15, 17, 10],dur=[2.0 ,1.0 ,1.0 ,1.0 ,1.0 ,2.0 ,1.0 ,2.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0])
	d1 >> pluck([2, 9, 9, 7, 5, 3, 2, 7, 9, 7, 7, 6, 2, 10, 9, 7, 5, 7],dur=[2.0 ,1.0 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,1.0 ,1.5 ,0.5 ,1.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,1.0 ,1.0])
	d2 >> pluck([-2, 2, 2, 0, -2, -2, -3, -2, 2, 3, -3, 2, 0, -2, 5, 3, 2, 2],dur=[2.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0])
	d3 >> pluck([-17, -5, -6, -5, -3, -2, -8, -6, -5, -12, -10, -17, -14, -12, -10, -17],dur=[1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0])
@structure
def a1():
	d0 >> pluck([12, 14, 12, 12, 10, 9, 7, 9, 10, 12, 10],dur=[1.0 ,1.0 ,2.0 ,1.0 ,3.0 ,2.0 ,1.0 ,1.0 ,1.0 ,1.0 ,2.0])
	d1 >> pluck([5, 3, 2, 7, 3, 7, 5, 3, 2, 5, 7, 7, 5, 4, 2, 0, 5, 7],dur=[0.5 ,0.5 ,1.0 ,1.0 ,0.5 ,0.5 ,0.5 ,0.5 ,3.0 ,2.0 ,1.0 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,1.0 ,1.0])
	d2 >> pluck([0, -2, -2, -3, -5, -3, -2, 0, 0, 0, -2, -3, -3, -5],dur=[1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,1.0 ,3.0 ,2.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0])
	d3 >> pluck([-15, -14, -9, -12, -7, -14, -19, -7, -8, -7, -5, -3, -10, -8],dur=[1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,3.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0])
@structure
def a2():
	d0 >> pluck([9, 7, 5, 10, 9, 10, 12, 14, 14, 12, 14],dur=[1.0 ,2.0 ,1.0 ,2.0 ,1.0 ,1.0 ,1.0 ,1.0 ,2.0 ,1.0 ,3.0])
	d1 >> pluck([7, 5, 5, 4, 0, 5, 7, 2, 2, 7, 5, 3, 2, 7, 6, 7, 10, 9, 7, 6],dur=[0.5 ,0.5 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,3.0])
	d2 >> pluck([-3, 0, 2, -5, 0, -2, -3, 2, 0, -2, 3, 2, 0, -2, -2, -3, -2, 3, -3],dur=[0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,1.0 ,2.0 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,0.5 ,0.5 ,1.0 ,1.0 ,3.0])
	d3 >> pluck([-7, -14, -12, -19, -10, -8, -6, -5, -3, -2, -9, -10],dur=[1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,3.0 ,3.0])
Clock.clear()

start = Clock.mod(16) - 0.1
Clock.schedule(a0, start + 0)
Clock.schedule(a1, start + 16)
Clock.schedule(a2, start + 32)
Clock.schedule(lambda : Clock.clear(), start + 48)
