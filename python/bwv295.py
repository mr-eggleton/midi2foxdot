Scale.default = list(range(12))
def structure(f):
    f()
    return f
@structure
def a0():
	d0 >> pluck([2, 2, 2, 9, 9, 10, 10, 9, 5, 7, 9, 10],dur=[1.0 ,1.0 ,1.0 ,2.0 ,1.0 ,2.0 ,1.0 ,3.0 ,1.0 ,1.0 ,1.0 ,1.0])
	d1 >> pluck([-3, -3, 2, 4, 2, 9, 9, 7, 6, 7, 7, 5, 5, 4, 3, 2, 2],dur=[1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,1.0 ,1.0 ,2.0 ,1.5 ,0.5 ,0.5 ,0.5 ,1.0])
	d2 >> pluck([-7, -5, -3, -5, -3, -3, -5, -7, -8, -10, 2, 2, 2, -3, 2, 0, 0, -2, -3],dur=[0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,2.0 ,1.0 ,3.0 ,0.5 ,1.0 ,0.5 ,1.0 ,0.5 ,0.5])
	d3 >> pluck([-10, -8, -7, -8, -7, -10, -11, -10, -18, -17, -15, -14, -17, -10, -10, -8, -6, -5],dur=[0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5 ,1.0 ,1.0 ,3.0 ,1.0 ,1.0 ,1.0 ,1.0])
@structure
def a1():
	d0 >> pluck([10, 9, 7, 5, 5, 7, 9, 7, 7, 9, 5],dur=[2.0 ,1.0 ,1.5 ,0.5 ,2.0 ,1.0 ,2.0 ,1.0 ,2.0 ,1.0 ,2.0])
	d1 >> pluck([4, 5, 7, 7, 5, 5, 4, 0, 4, 5, 4, 2, 1, 2, 4, 4, 4, 2, 1],dur=[0.5 ,0.5 ,1.0 ,0.5 ,0.5 ,1.0 ,1.0 ,2.0 ,1.0 ,2.0 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,1.0 ,1.0 ,0.5 ,0.5])
	d2 >> pluck([-5, 0, 0, 2, 0, -2, -3, 0, 0, 0, -2, -2, -3, -1, 1, -3, -3],dur=[1.0 ,1.0 ,1.0 ,1.0 ,0.75 ,0.25 ,2.0 ,1.0 ,2.0 ,0.5 ,0.5 ,1.0 ,0.5 ,0.5 ,1.0 ,1.0 ,1.0])
	d3 >> pluck([-12, -10, -8, -7, -14, -12, -19, -12, -19, -17, -15, -14, -12, -10, -8, -10, -11, -15, -10, -8, -7],dur=[0.5 ,0.5 ,1.0 ,1.0 ,1.0 ,1.0 ,2.0 ,1.0 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,1.0 ,0.5 ,0.5 ,1.0])
@structure
def a2():
	d0 >> pluck([5, 4, 2, 4, 5, 7, 5, 4, 2, 2],dur=[1.0 ,3.0 ,1.0 ,1.0 ,1.0 ,3.0 ,1.0 ,1.5 ,0.5 ,3.0])
	d1 >> pluck([2, 2, 1, 2, -3, 2, 4, 2, 4, 4, 2, 2, 1, -3],dur=[1.0 ,1.0 ,2.0 ,1.0 ,1.0 ,1.0 ,1.5 ,0.5 ,1.0 ,0.5 ,0.5 ,1.0 ,1.0 ,3.0])
	d2 >> pluck([-1, -8, -3, -3, -3, -3, -2, -3, -3, -3, -2, -3, -5, -6],dur=[1.0 ,1.0 ,2.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,0.75 ,0.25 ,3.0])
	d3 >> pluck([-16, -15, -7, -8, -10, -11, -10, -10, -11, -13, -11, -15, -10, -17, -15, -22],dur=[1.0 ,3.0 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,1.0 ,0.5 ,0.5 ,0.5 ,0.5 ,1.0 ,1.0 ,1.0 ,3.0])
Clock.clear()

start = Clock.mod(16) - 0.1
Clock.schedule(a0, start + 0)
Clock.schedule(a1, start + 16)
Clock.schedule(a2, start + 32)
Clock.schedule(lambda : Clock.clear(), start + 48)
